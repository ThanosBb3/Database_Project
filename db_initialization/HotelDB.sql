CREATE DATABASE `HotelDB`;
ALTER DATABASE HotelDB CHARACTER SET utf8 COLLATE utf8_bin;
USE `HotelDB`;


-- Create the table Customers
CREATE TABLE customers
(
 NFC_ID INT NOT NULL AUTO_INCREMENT, 
 first_name VARCHAR(100) NOT NULL,
 last_name VARCHAR(100) NOT NULL,
 birth_date date NOT NULL,
 id BIGINT NOT NULL,
 id_type VARCHAR(50) NOT NULL,
 id_issue VARCHAR(50) NOT NULL, 
 CONSTRAINT PKcustomers PRIMARY KEY (NFC_ID),
 CONSTRAINT CHKcustomers CHECK (id_type IN ('Passport', 'Identity'))
);

-- Create the table Emails
CREATE TABLE customer_emails
(
 NFC_ID INT NOT NULL,
 email_address VARCHAR(80) NOT NULL, 
 CONSTRAINT PKcustomer_emails PRIMARY KEY(NFC_ID, email_address),
 CONSTRAINT FKcustomer_emails FOREIGN KEY (NFC_ID) REFERENCES customers(NFC_ID) ON UPDATE CASCADE ON DELETE CASCADE
);


-- Create the table Phones
CREATE TABLE customer_phones
(
 NFC_ID INT NOT NULL,
 phone_number BIGINT NOT NULL, 
 CONSTRAINT PKcustomer_phones PRIMARY KEY(NFC_ID, phone_number),
 CONSTRAINT FKcustomer_phones FOREIGN KEY (NFC_ID) REFERENCES customers(NFC_ID) ON UPDATE CASCADE ON DELETE CASCADE
);

-- Create the table Areas
CREATE TABLE areas
(
 AREA_ID INT NOT NULL AUTO_INCREMENT, 
 area_name VARCHAR(40) NOT NULL,
 beds TINYINT NOT NULL,
 area_floor TINYINT,
 orientation VARCHAR(20),
 info VARCHAR(100),
 CONSTRAINT PKareas PRIMARY KEY(AREA_ID),
 CONSTRAINT CHKareas CHECK (orientation IN ('N', 'W', 'E', 'S', 'NE', 'NW', 'SE', 'SW')),
 CONSTRAINT CHK2areas CHECK (area_floor < 6)
);


-- Create the table Services
CREATE TABLE services
(
 SERVICE_ID INT NOT NULL AUTO_INCREMENT,
 category VARCHAR(30) NOT NULL,
 service_description VARCHAR(100) NOT NULL,
 register_required BOOLEAN NOT NULL,
 CONSTRAINT PKservices PRIMARY KEY(SERVICE_ID)
);

-- Create the table WithRegister
CREATE TABLE services_With_Register
(
 SERVICE_ID INT NOT NULL,
 CONSTRAINT PKservices_With_Register PRIMARY KEY(SERVICE_ID),
 CONSTRAINT FKservices_With_Register FOREIGN KEY (SERVICE_ID) REFERENCES services(SERVICE_ID) ON UPDATE CASCADE ON DELETE CASCADE
);


-- Create the table NoRegister
CREATE TABLE services_No_Register
(
 SERVICE_ID INT NOT NULL,
 CONSTRAINT PKservices_No_Register PRIMARY KEY(SERVICE_ID),
 CONSTRAINT FKservices_No_Register FOREIGN KEY (SERVICE_ID) REFERENCES services(SERVICE_ID) ON UPDATE CASCADE ON DELETE CASCADE
);

-- Create the table Register
CREATE TABLE register
(
 NFC_ID INT NOT NULL,
 SERVICE_ID INT NOT NULL,
 date_time DATETIME NOT NULL,
 CONSTRAINT PKregister PRIMARY KEY (NFC_ID, SERVICE_ID),
 CONSTRAINT FK1customers FOREIGN KEY (NFC_ID) REFERENCES customers(NFC_ID) ON UPDATE CASCADE ON DELETE CASCADE,
 CONSTRAINT FK2service FOREIGN KEY (SERVICE_ID) REFERENCES services_With_Register(SERVICE_ID) ON UPDATE CASCADE ON DELETE CASCADE  
);

-- Create the table HasAccess
CREATE TABLE haveAccess
(
  NFC_ID INT NOT NULL,
  AREA_ID INT NOT NULL,
  start_datetime DATETIME NOT NULL,
  end_datetime DATETIME NOT NULL,
  CONSTRAINT PKhaveAccess PRIMARY KEY (NFC_ID, AREA_ID),
  CONSTRAINT FK2customers FOREIGN KEY (NFC_ID) REFERENCES customers(NFC_ID) ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT FK2area FOREIGN KEY (AREA_ID) REFERENCES areas(AREA_ID) ON UPDATE CASCADE ON DELETE CASCADE  
);

-- Create the table Visit
CREATE TABLE visit
(
  NFC_ID INT NOT NULL,
  AREA_ID INT NOT NULL,
  enter_datetime DATETIME NOT NULL,
  leave_datetime DATETIME NOT NULL,
  CONSTRAINT PKvisit PRIMARY KEY (NFC_ID, AREA_ID),
  CONSTRAINT FK3customers FOREIGN KEY (NFC_ID) REFERENCES customers(NFC_ID) ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT FK3area FOREIGN KEY (AREA_ID) REFERENCES areas(AREA_ID) ON UPDATE CASCADE ON DELETE CASCADE  
);

-- Create the table UseService
CREATE TABLE useService
(
 NFC_ID INT NOT NULL,
 SERVICE_ID INT NOT NULL,
 date_time DATETIME NOT NULL,
 cost FLOAT NOT NULL,
 useService_description VARCHAR(200),
 CONSTRAINT PKuseService PRIMARY KEY (NFC_ID, SERVICE_ID),
 CONSTRAINT FK4customers FOREIGN KEY (NFC_ID) REFERENCES customers(NFC_ID) ON UPDATE CASCADE ON DELETE CASCADE,
 CONSTRAINT FK3service FOREIGN KEY (SERVICE_ID) REFERENCES services(SERVICE_ID) ON UPDATE CASCADE ON DELETE CASCADE  
);

